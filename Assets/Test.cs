//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Test.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Test : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test"",
    ""maps"": [
        {
            ""name"": ""Test  HOTAS Mapping"",
            ""id"": ""a71048de-1d38-4654-b09a-1890bc9bbbb0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e21641dc-590c-4039-a677-40a2a6ba508e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thruster"",
                    ""type"": ""Button"",
                    ""id"": ""cb5e1e52-cd4e-49f5-8f44-c52880e1596e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b0f67a1a-2e4a-4099-8195-9c664291b1bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""28f90825-3514-4b76-8b5a-00f193a44e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""0c7fdf2d-b6db-4985-ac2f-137d71625e72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thruster Twist"",
                    ""type"": ""Value"",
                    ""id"": ""a69a2998-bd69-4bd7-9d32-66c05533d45a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Stick Twist"",
                    ""type"": ""Button"",
                    ""id"": ""1e502716-c522-43eb-a401-7d4fbbfe91ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""736c21d3-7191-4da5-992a-fc7475478690"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Missle"",
                    ""type"": ""Button"",
                    ""id"": ""5e2e4694-f79b-47ef-a871-f4e22be820b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 1"",
                    ""type"": ""Button"",
                    ""id"": ""009afdab-8cde-43d8-aa4c-9a7236c929ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 2"",
                    ""type"": ""Button"",
                    ""id"": ""0c2e8f7b-e450-428e-81e9-4b73813a09fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 3"",
                    ""type"": ""Button"",
                    ""id"": ""0d0be49d-af3d-45e6-907f-421ef43d0528"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 4"",
                    ""type"": ""Button"",
                    ""id"": ""a1bfe5ca-9c2d-4af4-831c-d9d641b6e408"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 5"",
                    ""type"": ""Button"",
                    ""id"": ""dc95cfa7-8fcb-4ec4-a84d-a91af4070ce0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 6"",
                    ""type"": ""Button"",
                    ""id"": ""931502eb-57f1-449d-8cb1-bf50f61ee17a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 7"",
                    ""type"": ""Button"",
                    ""id"": ""646271ae-036c-4250-9096-a25735d6c601"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon 8"",
                    ""type"": ""Button"",
                    ""id"": ""68f8e183-26dd-4365-84f3-fd8ca9a3e39b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a928006-fab5-4423-bd67-705cfccc009c"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68007dab-4a51-427b-bcce-3fc3a59d291a"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Thruster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ecad213-7c60-4e53-948e-23d76b445e38"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""517d06fe-4db8-4c1b-bbeb-8c748075caa6"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8907dfc4-ab81-42b4-9437-e9824ed5b962"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98c73c02-deba-4b06-a124-6a27e62b50b5"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/dial"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Thruster Twist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd9e70c6-5c8a-4dd9-ae90-06ee54e6bc51"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stick Twist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b3a32a0-e888-4653-9e96-7ddec96386e4"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/hat"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67c0233c-dfc3-4929-a4aa-6a3a9eddb148"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Missle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d667c99-7e3c-4577-b0b5-11e28568e3fa"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c78c90-7842-4c8d-be09-3c0afb248c99"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4dafe1f-3a36-480d-99ec-4d296be6456d"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31cfc0a0-7dab-4e7d-b500-542b1b58ee90"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2c235e2-a918-45b5-bf4b-5946517009b0"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""107948d3-ba82-4406-909c-8a8c2325b625"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84633632-c9e7-420a-8102-797d596e0e6f"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ccbbb6-4b11-4b57-96c6-de728ff7158a"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas 4>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<HID::Thrustmaster T.Flight Hotas 4>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Test  HOTAS Mapping
        m_TestHOTASMapping = asset.FindActionMap("Test  HOTAS Mapping", throwIfNotFound: true);
        m_TestHOTASMapping_Move = m_TestHOTASMapping.FindAction("Move", throwIfNotFound: true);
        m_TestHOTASMapping_Thruster = m_TestHOTASMapping.FindAction("Thruster", throwIfNotFound: true);
        m_TestHOTASMapping_Fire = m_TestHOTASMapping.FindAction("Fire", throwIfNotFound: true);
        m_TestHOTASMapping_Pause = m_TestHOTASMapping.FindAction("Pause", throwIfNotFound: true);
        m_TestHOTASMapping_Select = m_TestHOTASMapping.FindAction("Select", throwIfNotFound: true);
        m_TestHOTASMapping_ThrusterTwist = m_TestHOTASMapping.FindAction("Thruster Twist", throwIfNotFound: true);
        m_TestHOTASMapping_StickTwist = m_TestHOTASMapping.FindAction("Stick Twist", throwIfNotFound: true);
        m_TestHOTASMapping_Look = m_TestHOTASMapping.FindAction("Look", throwIfNotFound: true);
        m_TestHOTASMapping_Missle = m_TestHOTASMapping.FindAction("Missle", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon1 = m_TestHOTASMapping.FindAction("Weapon 1", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon2 = m_TestHOTASMapping.FindAction("Weapon 2", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon3 = m_TestHOTASMapping.FindAction("Weapon 3", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon4 = m_TestHOTASMapping.FindAction("Weapon 4", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon5 = m_TestHOTASMapping.FindAction("Weapon 5", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon6 = m_TestHOTASMapping.FindAction("Weapon 6", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon7 = m_TestHOTASMapping.FindAction("Weapon 7", throwIfNotFound: true);
        m_TestHOTASMapping_Weapon8 = m_TestHOTASMapping.FindAction("Weapon 8", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test  HOTAS Mapping
    private readonly InputActionMap m_TestHOTASMapping;
    private ITestHOTASMappingActions m_TestHOTASMappingActionsCallbackInterface;
    private readonly InputAction m_TestHOTASMapping_Move;
    private readonly InputAction m_TestHOTASMapping_Thruster;
    private readonly InputAction m_TestHOTASMapping_Fire;
    private readonly InputAction m_TestHOTASMapping_Pause;
    private readonly InputAction m_TestHOTASMapping_Select;
    private readonly InputAction m_TestHOTASMapping_ThrusterTwist;
    private readonly InputAction m_TestHOTASMapping_StickTwist;
    private readonly InputAction m_TestHOTASMapping_Look;
    private readonly InputAction m_TestHOTASMapping_Missle;
    private readonly InputAction m_TestHOTASMapping_Weapon1;
    private readonly InputAction m_TestHOTASMapping_Weapon2;
    private readonly InputAction m_TestHOTASMapping_Weapon3;
    private readonly InputAction m_TestHOTASMapping_Weapon4;
    private readonly InputAction m_TestHOTASMapping_Weapon5;
    private readonly InputAction m_TestHOTASMapping_Weapon6;
    private readonly InputAction m_TestHOTASMapping_Weapon7;
    private readonly InputAction m_TestHOTASMapping_Weapon8;
    public struct TestHOTASMappingActions
    {
        private @Test m_Wrapper;
        public TestHOTASMappingActions(@Test wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TestHOTASMapping_Move;
        public InputAction @Thruster => m_Wrapper.m_TestHOTASMapping_Thruster;
        public InputAction @Fire => m_Wrapper.m_TestHOTASMapping_Fire;
        public InputAction @Pause => m_Wrapper.m_TestHOTASMapping_Pause;
        public InputAction @Select => m_Wrapper.m_TestHOTASMapping_Select;
        public InputAction @ThrusterTwist => m_Wrapper.m_TestHOTASMapping_ThrusterTwist;
        public InputAction @StickTwist => m_Wrapper.m_TestHOTASMapping_StickTwist;
        public InputAction @Look => m_Wrapper.m_TestHOTASMapping_Look;
        public InputAction @Missle => m_Wrapper.m_TestHOTASMapping_Missle;
        public InputAction @Weapon1 => m_Wrapper.m_TestHOTASMapping_Weapon1;
        public InputAction @Weapon2 => m_Wrapper.m_TestHOTASMapping_Weapon2;
        public InputAction @Weapon3 => m_Wrapper.m_TestHOTASMapping_Weapon3;
        public InputAction @Weapon4 => m_Wrapper.m_TestHOTASMapping_Weapon4;
        public InputAction @Weapon5 => m_Wrapper.m_TestHOTASMapping_Weapon5;
        public InputAction @Weapon6 => m_Wrapper.m_TestHOTASMapping_Weapon6;
        public InputAction @Weapon7 => m_Wrapper.m_TestHOTASMapping_Weapon7;
        public InputAction @Weapon8 => m_Wrapper.m_TestHOTASMapping_Weapon8;
        public InputActionMap Get() { return m_Wrapper.m_TestHOTASMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestHOTASMappingActions set) { return set.Get(); }
        public void SetCallbacks(ITestHOTASMappingActions instance)
        {
            if (m_Wrapper.m_TestHOTASMappingActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMove;
                @Thruster.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThruster;
                @Thruster.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThruster;
                @Thruster.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThruster;
                @Fire.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnFire;
                @Pause.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnPause;
                @Select.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnSelect;
                @ThrusterTwist.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThrusterTwist;
                @ThrusterTwist.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThrusterTwist;
                @ThrusterTwist.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnThrusterTwist;
                @StickTwist.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnStickTwist;
                @StickTwist.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnStickTwist;
                @StickTwist.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnStickTwist;
                @Look.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnLook;
                @Missle.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMissle;
                @Missle.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMissle;
                @Missle.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnMissle;
                @Weapon1.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon1;
                @Weapon1.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon1;
                @Weapon1.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon1;
                @Weapon2.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon2;
                @Weapon2.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon2;
                @Weapon2.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon2;
                @Weapon3.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon3;
                @Weapon3.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon3;
                @Weapon3.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon3;
                @Weapon4.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon4;
                @Weapon4.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon4;
                @Weapon4.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon4;
                @Weapon5.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon5;
                @Weapon5.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon5;
                @Weapon5.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon5;
                @Weapon6.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon6;
                @Weapon6.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon6;
                @Weapon6.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon6;
                @Weapon7.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon7;
                @Weapon7.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon7;
                @Weapon7.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon7;
                @Weapon8.started -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon8;
                @Weapon8.performed -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon8;
                @Weapon8.canceled -= m_Wrapper.m_TestHOTASMappingActionsCallbackInterface.OnWeapon8;
            }
            m_Wrapper.m_TestHOTASMappingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Thruster.started += instance.OnThruster;
                @Thruster.performed += instance.OnThruster;
                @Thruster.canceled += instance.OnThruster;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @ThrusterTwist.started += instance.OnThrusterTwist;
                @ThrusterTwist.performed += instance.OnThrusterTwist;
                @ThrusterTwist.canceled += instance.OnThrusterTwist;
                @StickTwist.started += instance.OnStickTwist;
                @StickTwist.performed += instance.OnStickTwist;
                @StickTwist.canceled += instance.OnStickTwist;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Missle.started += instance.OnMissle;
                @Missle.performed += instance.OnMissle;
                @Missle.canceled += instance.OnMissle;
                @Weapon1.started += instance.OnWeapon1;
                @Weapon1.performed += instance.OnWeapon1;
                @Weapon1.canceled += instance.OnWeapon1;
                @Weapon2.started += instance.OnWeapon2;
                @Weapon2.performed += instance.OnWeapon2;
                @Weapon2.canceled += instance.OnWeapon2;
                @Weapon3.started += instance.OnWeapon3;
                @Weapon3.performed += instance.OnWeapon3;
                @Weapon3.canceled += instance.OnWeapon3;
                @Weapon4.started += instance.OnWeapon4;
                @Weapon4.performed += instance.OnWeapon4;
                @Weapon4.canceled += instance.OnWeapon4;
                @Weapon5.started += instance.OnWeapon5;
                @Weapon5.performed += instance.OnWeapon5;
                @Weapon5.canceled += instance.OnWeapon5;
                @Weapon6.started += instance.OnWeapon6;
                @Weapon6.performed += instance.OnWeapon6;
                @Weapon6.canceled += instance.OnWeapon6;
                @Weapon7.started += instance.OnWeapon7;
                @Weapon7.performed += instance.OnWeapon7;
                @Weapon7.canceled += instance.OnWeapon7;
                @Weapon8.started += instance.OnWeapon8;
                @Weapon8.performed += instance.OnWeapon8;
                @Weapon8.canceled += instance.OnWeapon8;
            }
        }
    }
    public TestHOTASMappingActions @TestHOTASMapping => new TestHOTASMappingActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface ITestHOTASMappingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnThruster(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnThrusterTwist(InputAction.CallbackContext context);
        void OnStickTwist(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMissle(InputAction.CallbackContext context);
        void OnWeapon1(InputAction.CallbackContext context);
        void OnWeapon2(InputAction.CallbackContext context);
        void OnWeapon3(InputAction.CallbackContext context);
        void OnWeapon4(InputAction.CallbackContext context);
        void OnWeapon5(InputAction.CallbackContext context);
        void OnWeapon6(InputAction.CallbackContext context);
        void OnWeapon7(InputAction.CallbackContext context);
        void OnWeapon8(InputAction.CallbackContext context);
    }
}
